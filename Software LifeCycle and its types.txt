=============================================================
Exp 1. for loop in a parallel way
--------------------------------------------------------------
import concurrent.futures

def task(i):
    # Do some computation here
    return i * 2
with concurrent.futures.ThreadPoolExecutor() as executor:
    # Submit tasks to the executor
    futures = [executor.submit(task, i) for i in range(10)]
    # Collect the results
    results = [future.result() for future in concurrent.futures.as_completed(futures)]
print(results)

========================================================
Exp 2. multithreading via extending thread class
--------------------------------------------------------
class MultithreadingDemo extends Thread {
    public void run()
    {
        try {
            System.out.println(
                "Thread " + Thread.currentThread().getId()
                + " is running");
        }
        catch (Exception e) {
            System.out.println("Exception is caught");
        }
    }
}
 
public class Multithread {
    public static void main(String[] args)
    {
        int n = 8; 
        for (int i = 0; i < n; i++) {
            MultithreadingDemo object
                = new MultithreadingDemo();
            object.start();
        }
    }
}

=========================================================
Exp 3. to implement sleep()
---------------------------------------------------------
import java.io.*;
import java.lang.Thread;
class GFG {
    public static void main(String[] args) {

        try {
            for(int i = 0; i < 5; i++) {
                Thread.sleep(1000);
                System.out.println(i);
             }
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}

===================================================
Exp 4.to implement priority in multithreading
---------------------------------------------------

class Main extends Thread {
    public void run() {
        System.out.println("Inside run method");
    }

    public static void main(String[] args) {

        Main t1 = new Main();
        Main t2 = new Main();
        Main t3 = new Main();

        System.out.println("t1 thread priority : " + t1.getPriority());
        System.out.println("t2 thread priority : " + t2.getPriority());
        System.out.println("t3 thread priority : " + t3.getPriority());

        t1.setPriority(2);
        t2.setPriority(5);
        t3.setPriority(8);

        System.out.println("Updated t1 thread priority : " + t1.getPriority());
        System.out.println("Updated t2 thread priority : " + t2.getPriority());
        System.out.println("Updated t3 thread priority : " + t3.getPriority());

    }
}
===========================================================
Exp 5. to implement multithreading for sum of 10K numbers
---------------------------------------------------------
class SumCalculator {
    private int sum = 0;

    public synchronized void addToSum(int value) {
        sum += value;
    }

    public int getSum() {
        return sum;
    }
}

class SumThread extends Thread {
    private int[] numbers;
    private SumCalculator calculator;

    public SumThread(int[] numbers, SumCalculator calculator) {
        this.numbers = numbers;
        this.calculator = calculator;
    }

    public void run() {
        for (int number : numbers) {
            calculator.addToSum(number);
        }
    }
}

public class Sync {
    public static void main(String[] args) throws InterruptedException {
        int[] numbers = new int[10000];
        for (int i = 0; i < 10000; i++) numbers[i] = i + 1;

        SumCalculator calculator = new SumCalculator();
        // Split the numbers into two parts for parallel processing
        SumThread thread1 = new SumThread(java.util.Arrays.copyOfRange(numbers, 0, 5000), calculator);
        SumThread thread2 = new SumThread(java.util.Arrays.copyOfRange(numbers, 5000, 10000), calculator);

        // Start the threads
        thread1.start();
        thread2.start();

        // Ensure both threads complete before accessing the sum
        thread1.join();
        thread2.join();

        // Output the final sum after both threads finish
        System.out.println("The sum of 10000 integers is: " + calculator.getSum());
    }
}
==================================================================
Exp 6. Prime and palindrome using multi threading
-------------------------------------------------------------
class PrimeThread extends Thread {
    @Override
    public void run() {
        System.out.println("Prime numbers between 0 and 100:");
        for (int i = 2; i <= 100; i++) {
            if (isPrime(i)) System.out.print(i + " ");
        }
        System.out.println();
    }

    private boolean isPrime(int n) {
        if (n <= 1) return false;
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) return false;
        }
        return true;
    }
}

class PalindromeThread extends Thread {
    @Override
    public void run() {
        System.out.println("Palindrome numbers between 10 and 1000:");
        for (int i = 10; i <= 1000; i++) {
            if (isPalindrome(i)) System.out.print(i + " ");
        }
        System.out.println();
    }

    private boolean isPalindrome(int n) {
        int reversed = 0, original = n;
        while (n > 0) {
            reversed = reversed * 10 + n % 10;
            n /= 10;
        }
        return original == reversed;
    }
}

class Main {  // Renamed class to 'Main'
    public static void main(String[] args) throws Exception {
        PrimeThread primeThread = new PrimeThread();
        PalindromeThread palindromeThread = new PalindromeThread();

        System.out.println("1. Sequential\n2. Parallel");
        int choice = System.in.read() - '0';

        long startTime = System.currentTimeMillis();

        if (choice == 1) {
            primeThread.start(); primeThread.join();
            palindromeThread.start(); palindromeThread.join();
        } else if (choice == 2) {
            primeThread.start(); palindromeThread.start();
            primeThread.join(); palindromeThread.join();
        } else {
            System.out.println("Invalid choice.");
            return;
        }

        System.out.println("Execution time: " + (System.currentTimeMillis() - startTime) + " ms");
    }
}

=========================================================
Exp 7. Multithreading: one for input one for printing
-----------------------------------------------------------
import java.util.Scanner;

class InputThread extends Thread {
    private final SharedData sharedData;

    public InputThread(SharedData sharedData) {
        this.sharedData = sharedData;
    }

    @Override
    public void run() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a message: ");
        sharedData.setMessage(scanner.nextLine());
    }
}

class PrintThread extends Thread {
    private final SharedData sharedData;

    public PrintThread(SharedData sharedData) {
        this.sharedData = sharedData;
    }

    @Override
    public void run() {
        while (sharedData.getMessage() == null) {}  // Busy-wait for message
        System.out.println("Message: " + sharedData.getMessage());
    }
}

class SharedData {
    private String message;
    public synchronized void setMessage(String message) { this.message = message; }
    public synchronized String getMessage() { return message; }
}

public class Main {
    public static void main(String[] args) {
        SharedData sharedData = new SharedData();
        new InputThread(sharedData).start();
        new PrintThread(sharedData).start();
    }
}

==============================================================================
Exp 8.matrix multiplication using multithreading
-----------------------------------------------------------------------------
class Main extends Thread {
    private final int row, col;
    private final int[][] matrixA, matrixB, result;

    public Main(int row, int col, int[][] matrixA, int[][] matrixB, int[][] result) {
        this.row = row; this.col = col;
        this.matrixA = matrixA; this.matrixB = matrixB; this.result = result;
    }

    @Override
    public void run() {
        result[row][col] = matrixA[row][0] * matrixB[0][col] + matrixA[row][1] * matrixB[1][col];
    }

    public static void main(String[] args) {
        int[][] matrixA = {{1, 2}, {3, 4}};
        int[][] matrixB = {{4, 3}, {2, 1}};
        int[][] result = new int[2][2];

        Thread[][] threads = new Thread[2][2];
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                threads[i][j] = new Main(i, j, matrixA, matrixB, result);
                threads[i][j].start();
            }
        }

        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++) {
                try {
                    threads[i][j].join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

        System.out.println("Result Matrix:");
        for (int[] row : result) {
            for (int value : row) System.out.print(value + " ");
            System.out.println();
        }
    }
}








